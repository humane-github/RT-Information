// -*- Java -*-
/*!
 * @file  FaceDetectorImpl.java
 * @brief ${rtcParam.description}
 * @date  $Date$
 *
 * $Id$
 */

import java.io.IOException;

import jp.co.humane.configlib.ConfigFile;
import jp.co.humane.opencvlib.MatFactory;
import jp.co.humane.opencvlib.MatFactory.MatType;
import jp.go.aist.rtm.RTC.DataFlowComponentBase;
import jp.go.aist.rtm.RTC.Manager;
import jp.go.aist.rtm.RTC.port.InPort;
import jp.go.aist.rtm.RTC.port.OutPort;
import jp.go.aist.rtm.RTC.util.DataRef;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.highgui.VideoCapture;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.objdetect.Objdetect;

import RTC.CameraImage;
import RTC.ReturnCode_t;
import RTC.Time;
import RTC.TimedLong;
import RTC.TimedString;

/*!
 * @class FaceDetectorImpl
 * @brief ${rtcParam.description}
 *
 */
public class FaceDetectorImpl extends DataFlowComponentBase
{
	private final static String CONFG_PATH = ".\\FaceDetector.properties";
	private final static String CONF_CAMERA_DEVICE_ID = "CAMERA_DEVICE_ID";
	private final static String CONF_CASCADE_PATH = "CASCADE_PATH";
	private final static String CONF_SHOW_PREVIEW_DIALOG = "SHOW_PREVIEW_DIALOG";
		
	private ConfigFile config = null;
	private boolean failedInitialize = false;
	private boolean sleep = false;
	private boolean showPreviewDialog = false;
	private PreviewDialog previewDialog = null;
	
  /*!
   * @brief constructor
   * @param manager Maneger Object
   */
	public FaceDetectorImpl(Manager manager) {  
        super(manager);
        // <rtc-template block="initializer">
        m_CameraImage_val = new CameraImage(new Time(0,0), (short)0, (short)0, (short)0, "", 0.0, new byte[255]);
        m_CameraImage = new DataRef<CameraImage>(m_CameraImage_val);
        m_CameraImageIn = new InPort<CameraImage>("CameraImage", m_CameraImage);
        m_Result_val = new TimedString(new Time(0,0),"");
        m_Result = new DataRef<TimedString>(m_Result_val);
        m_ResultOut = new OutPort<TimedString>("Result", m_Result);
        m_Faces_val = new TimedLong(new Time(0,0),0);
        m_Faces = new DataRef<TimedLong>(m_Faces_val);
        m_FacesOut = new OutPort<TimedLong>("Faces", m_Faces);
        // </rtc-template>

    }

    /**
     *
     * The initialize action (on CREATED->ALIVE transition)
     * formaer rtc_init_entry() 
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
    @Override
    protected ReturnCode_t onInitialize() {
        // Registration: InPort/OutPort/Service
        // <rtc-template block="registration">
        // Set InPort buffers
        addInPort("CameraImage", m_CameraImageIn);
        
        // Set OutPort buffer
        addOutPort("Result", m_ResultOut);
        addOutPort("Faces", m_FacesOut);
        // </rtc-template>

        return super.onInitialize();
    }

    /***
     *
     * The finalize action (on ALIVE->END transition)
     * formaer rtc_exiting_entry()
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
//    @Override
//    protected ReturnCode_t onFinalize() {
//        return super.onFinalize();
//    }

    /***
     *
     * The startup action when ExecutionContext startup
     * former rtc_starting_entry()
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
//    @Override
//    protected ReturnCode_t onStartup(int ec_id) {
//        return super.onStartup(ec_id);
//    }

    /***
     *
     * The shutdown action when ExecutionContext stop
     * former rtc_stopping_entry()
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
//    @Override
//    protected ReturnCode_t onShutdown(int ec_id) {
//        return super.onShutdown(ec_id);
//    }

    /***
     *
     * The activated action (Active state entry action)
     * former rtc_active_entry()
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
    @Override
    protected ReturnCode_t onActivated(int ec_id)
    {
    	//
    	System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    	
    	//
    	try
    	{
        	config = new ConfigFile();
        	config.load(CONFG_PATH);
    	}
    	catch( IOException ex )
    	{
    		System.out.println(ex.getMessage());
    		failedInitialize = true;
    		return super.onActivated(ec_id);
    	}
    	
		//
		showPreviewDialog = (config.getInt(CONF_SHOW_PREVIEW_DIALOG) == 1);
		if( showPreviewDialog )
		{
			previewDialog = new PreviewDialog();
			previewDialog.init();			
		}		
        return super.onActivated(ec_id);
    }

    /***
     *
     * The deactivated action (Active state exit action)
     * former rtc_active_exit()
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
    @Override
    protected ReturnCode_t onDeactivated(int ec_id) {
        return super.onDeactivated(ec_id);
    }

    /***
     *
     * The execution action that is invoked periodically
     * former rtc_active_do()
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
    @Override
    protected ReturnCode_t onExecute(int ec_id)
    {
    	//
    	if( failedInitialize ){return super.onExecute(ec_id);}

    	int scale = 4;
    	String cascadeName = config.getString(CONF_CASCADE_PATH);
    	if( m_CameraImageIn.isNew() )
    	{
    		try
    		{
        		m_CameraImageIn.read();        		
        		Mat cameraMat = MatFactory.create(m_CameraImage.v.width,
        											m_CameraImage.v.height,
        											m_CameraImage.v.bpp,
        											m_CameraImage.v.pixels);
        		//cameraMat.put(0, 0, m_CameraImage.v.pixels);

    			//
        		Mat grayImg = MatFactory.create(cameraMat.width(), cameraMat.height(), MatType.MONO_8BIT);
        		//Mat grayImg = new Mat(cameraMat.height(),cameraMat.width(),CvType.CV_8UC1);
        		Mat smallImg = MatFactory.create(cameraMat.width()/scale, cameraMat.height()/scale, MatType.MONO_8BIT);
        		//Mat smallImg = new Mat(cameraMat.height()/scale,cameraMat.width()/scale,CvType.CV_8UC1);    		    		
        		Imgproc.cvtColor(cameraMat, grayImg, Imgproc.COLOR_BGR2GRAY);
        		Imgproc.resize(grayImg, smallImg, smallImg.size(),0,0,Imgproc.INTER_LINEAR);
        		
        		//
        		CascadeClassifier cascade = new CascadeClassifier();
        		if( !cascade.load(cascadeName) )
        		{
        			failedInitialize = true;
        			System.out.println("Failed cascadefile");
        	        return super.onExecute(ec_id);
        		}
        		
        		MatOfRect faces = new MatOfRect();
        		cascade.detectMultiScale(smallImg, faces, 1.1, 2,Objdetect.CASCADE_SCALE_IMAGE , new Size(30,30),new Size());
        		if( faces.toArray().length > 0 )
        		{
        			sleep = true;
        			m_Faces_val.data = faces.toArray().length;    			
        			m_FacesOut.write();
        			if( showPreviewDialog )
        			{
            			for( Rect r : faces.toArray() )
            			{    				
                			Point center = new Point();
                			int radius = (int)((r.width+r.height)*0.25*scale);
                			center.x = (int)((r.x + r.width * 0.5) * scale);
                			center.y = (int)((r.y + r.height * 0.5) * scale);
                			Core.circle(cameraMat, center, radius, new Scalar(80,80,255),3,8,0);
            			}    				
        			}
        		}
        		if(showPreviewDialog){previewDialog.showDialog(cameraMat);}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}

//    	Mat cameraMat = new Mat(0, 0, CvType.CV_32S);
//		gCamera.read(cameraMat);
//		try
//		{
//
//			//
//    		Mat grayImg = new Mat(cameraMat.height(),cameraMat.width(),CvType.CV_8UC1);
//    		Mat smallImg = new Mat(cameraMat.height()/scale,cameraMat.width()/scale,CvType.CV_8UC1);    		    		
//    		Imgproc.cvtColor(cameraMat, grayImg, Imgproc.COLOR_BGR2GRAY);
//    		Imgproc.resize(grayImg, smallImg, smallImg.size(),0,0,Imgproc.INTER_LINEAR);
//    		
//    		//
//    		CascadeClassifier cascade = new CascadeClassifier();
//    		if( !cascade.load(cascadeName) )
//    		{
//    			failedInitialize = true;
//    			System.out.println("Failed cascadefile");
//    	        return super.onExecute(ec_id);
//    		}
//    		
//    		MatOfRect faces = new MatOfRect();
//    		cascade.detectMultiScale(smallImg, faces, 1.1, 2,Objdetect.CASCADE_SCALE_IMAGE , new Size(30,30),new Size());
//    		if( faces.toArray().length > 0 )
//    		{
//    			m_Faces_val.data = faces.toArray().length;    			
//    			m_FacesOut.write();
//    			if( showPreviewDialog )
//    			{
//        			for( Rect r : faces.toArray() )
//        			{    				
//            			Point center = new Point();
//            			int radius = (int)((r.width+r.height)*0.25*scale);
//            			center.x = (int)((r.x + r.width * 0.5) * scale);
//            			center.y = (int)((r.y + r.height * 0.5) * scale);
//            			Core.circle(cameraMat, center, radius, new Scalar(80,80,255),3,8,0);
//        			}    				
//    			}
//    		}
//    		if(showPreviewDialog){previewDialog.showDialog(cameraMat);}
//		}
//		catch(Exception e)
//		{
//			e.printStackTrace();
//		}
        return super.onExecute(ec_id);
    }

    /***
     *
     * The aborting action when main logic error occurred.
     * former rtc_aborting_entry()
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
//  @Override
//  public ReturnCode_t onAborting(int ec_id) {
//      return super.onAborting(ec_id);
//  }

    /***
     *
     * The error action in ERROR state
     * former rtc_error_do()
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
//    @Override
//    public ReturnCode_t onError(int ec_id) {
//        return super.onError(ec_id);
//    }

    /***
     *
     * The reset action that is invoked resetting
     * This is same but different the former rtc_init_entry()
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
//    @Override
//    protected ReturnCode_t onReset(int ec_id) {
//        return super.onReset(ec_id);
//    }

    /***
     *
     * The state update action that is invoked after onExecute() action
     * no corresponding operation exists in OpenRTm-aist-0.2.0
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
//    @Override
//    protected ReturnCode_t onStateUpdate(int ec_id) {
//        return super.onStateUpdate(ec_id);
//    }

    /***
     *
     * The action that is invoked when execution context's rate is changed
     * no corresponding operation exists in OpenRTm-aist-0.2.0
     *
     * @param ec_id target ExecutionContext Id
     *
     * @return RTC::ReturnCode_t
     * 
     * 
     */
//    @Override
//    protected ReturnCode_t onRateChanged(int ec_id) {
//        return super.onRateChanged(ec_id);
//    }
//
    // DataInPort declaration
    // <rtc-template block="inport_declare">
    protected CameraImage m_CameraImage_val;
    protected DataRef<CameraImage> m_CameraImage;
    /*!
     */
    protected InPort<CameraImage> m_CameraImageIn;

    
    // </rtc-template>

    // DataOutPort declaration
    // <rtc-template block="outport_declare">
    protected TimedString m_Result_val;
    protected DataRef<TimedString> m_Result;
    /*!
     */
    protected OutPort<TimedString> m_ResultOut;

    protected TimedLong m_Faces_val;
    protected DataRef<TimedLong> m_Faces;
    /*!
     */
    protected OutPort<TimedLong> m_FacesOut;

    
    // </rtc-template>

    // CORBA Port declaration
    // <rtc-template block="corbaport_declare">
    
    // </rtc-template>

    // Service declaration
    // <rtc-template block="service_declare">
    
    // </rtc-template>

    // Consumer declaration
    // <rtc-template block="consumer_declare">
    
    // </rtc-template>


}
